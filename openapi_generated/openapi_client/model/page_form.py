# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PageForm(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            themeId = schemas.StrSchema
            title = schemas.StrSchema
            hostId = schemas.StrSchema
        
            @staticmethod
            def layout() -> typing.Type['TemplateLayout']:
                return TemplateLayout
            anonymousLayout = schemas.BoolSchema
            __annotations__ = {
                "themeId": themeId,
                "title": title,
                "hostId": hostId,
                "layout": layout,
                "anonymousLayout": anonymousLayout,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["themeId"]) -> MetaOapg.properties.themeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostId"]) -> MetaOapg.properties.hostId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layout"]) -> 'TemplateLayout': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anonymousLayout"]) -> MetaOapg.properties.anonymousLayout: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["themeId", "title", "hostId", "layout", "anonymousLayout", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["themeId"]) -> typing.Union[MetaOapg.properties.themeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostId"]) -> typing.Union[MetaOapg.properties.hostId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layout"]) -> typing.Union['TemplateLayout', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anonymousLayout"]) -> typing.Union[MetaOapg.properties.anonymousLayout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["themeId", "title", "hostId", "layout", "anonymousLayout", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        themeId: typing.Union[MetaOapg.properties.themeId, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        hostId: typing.Union[MetaOapg.properties.hostId, str, schemas.Unset] = schemas.unset,
        layout: typing.Union['TemplateLayout', schemas.Unset] = schemas.unset,
        anonymousLayout: typing.Union[MetaOapg.properties.anonymousLayout, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PageForm':
        return super().__new__(
            cls,
            *_args,
            themeId=themeId,
            title=title,
            hostId=hostId,
            layout=layout,
            anonymousLayout=anonymousLayout,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.template_layout import TemplateLayout
