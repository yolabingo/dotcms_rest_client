# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ContainerStructure(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            structureId = schemas.StrSchema
            containerInode = schemas.StrSchema
            containerId = schemas.StrSchema
            code = schemas.StrSchema
            contentTypeVar = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "structureId": structureId,
                "containerInode": containerInode,
                "containerId": containerId,
                "code": code,
                "contentTypeVar": contentTypeVar,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["structureId"]) -> MetaOapg.properties.structureId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containerInode"]) -> MetaOapg.properties.containerInode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containerId"]) -> MetaOapg.properties.containerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentTypeVar"]) -> MetaOapg.properties.contentTypeVar: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "structureId", "containerInode", "containerId", "code", "contentTypeVar", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["structureId"]) -> typing.Union[MetaOapg.properties.structureId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containerInode"]) -> typing.Union[MetaOapg.properties.containerInode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containerId"]) -> typing.Union[MetaOapg.properties.containerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentTypeVar"]) -> typing.Union[MetaOapg.properties.contentTypeVar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "structureId", "containerInode", "containerId", "code", "contentTypeVar", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        structureId: typing.Union[MetaOapg.properties.structureId, str, schemas.Unset] = schemas.unset,
        containerInode: typing.Union[MetaOapg.properties.containerInode, str, schemas.Unset] = schemas.unset,
        containerId: typing.Union[MetaOapg.properties.containerId, str, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        contentTypeVar: typing.Union[MetaOapg.properties.contentTypeVar, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContainerStructure':
        return super().__new__(
            cls,
            *_args,
            id=id,
            structureId=structureId,
            containerInode=containerInode,
            containerId=containerId,
            code=code,
            contentTypeVar=contentTypeVar,
            _configuration=_configuration,
            **kwargs,
        )
