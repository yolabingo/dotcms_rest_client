# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ContainerForm(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            identifier = schemas.StrSchema
            title = schemas.StrSchema
            friendlyName = schemas.StrSchema
            maxContentlets = schemas.Int32Schema
            code = schemas.StrSchema
            notes = schemas.StrSchema
            preLoop = schemas.StrSchema
            postLoop = schemas.StrSchema
            showOnMenu = schemas.BoolSchema
            sortOrder = schemas.Int32Schema
            sortContentletsBy = schemas.StrSchema
            structureInode = schemas.StrSchema
            
            
            class containerStructures(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ContainerStructure']:
                        return ContainerStructure
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ContainerStructure'], typing.List['ContainerStructure']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'containerStructures':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ContainerStructure':
                    return super().__getitem__(i)
            owner = schemas.StrSchema
            hostId = schemas.StrSchema
            staticify = schemas.BoolSchema
            useDiv = schemas.BoolSchema
            dynamic = schemas.BoolSchema
            __annotations__ = {
                "identifier": identifier,
                "title": title,
                "friendlyName": friendlyName,
                "maxContentlets": maxContentlets,
                "code": code,
                "notes": notes,
                "preLoop": preLoop,
                "postLoop": postLoop,
                "showOnMenu": showOnMenu,
                "sortOrder": sortOrder,
                "sortContentletsBy": sortContentletsBy,
                "structureInode": structureInode,
                "containerStructures": containerStructures,
                "owner": owner,
                "hostId": hostId,
                "staticify": staticify,
                "useDiv": useDiv,
                "dynamic": dynamic,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["friendlyName"]) -> MetaOapg.properties.friendlyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxContentlets"]) -> MetaOapg.properties.maxContentlets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preLoop"]) -> MetaOapg.properties.preLoop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postLoop"]) -> MetaOapg.properties.postLoop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showOnMenu"]) -> MetaOapg.properties.showOnMenu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortContentletsBy"]) -> MetaOapg.properties.sortContentletsBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["structureInode"]) -> MetaOapg.properties.structureInode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containerStructures"]) -> MetaOapg.properties.containerStructures: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostId"]) -> MetaOapg.properties.hostId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staticify"]) -> MetaOapg.properties.staticify: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useDiv"]) -> MetaOapg.properties.useDiv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dynamic"]) -> MetaOapg.properties.dynamic: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["identifier", "title", "friendlyName", "maxContentlets", "code", "notes", "preLoop", "postLoop", "showOnMenu", "sortOrder", "sortContentletsBy", "structureInode", "containerStructures", "owner", "hostId", "staticify", "useDiv", "dynamic", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> typing.Union[MetaOapg.properties.identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["friendlyName"]) -> typing.Union[MetaOapg.properties.friendlyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxContentlets"]) -> typing.Union[MetaOapg.properties.maxContentlets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preLoop"]) -> typing.Union[MetaOapg.properties.preLoop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postLoop"]) -> typing.Union[MetaOapg.properties.postLoop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showOnMenu"]) -> typing.Union[MetaOapg.properties.showOnMenu, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortOrder"]) -> typing.Union[MetaOapg.properties.sortOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortContentletsBy"]) -> typing.Union[MetaOapg.properties.sortContentletsBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["structureInode"]) -> typing.Union[MetaOapg.properties.structureInode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containerStructures"]) -> typing.Union[MetaOapg.properties.containerStructures, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostId"]) -> typing.Union[MetaOapg.properties.hostId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staticify"]) -> typing.Union[MetaOapg.properties.staticify, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useDiv"]) -> typing.Union[MetaOapg.properties.useDiv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dynamic"]) -> typing.Union[MetaOapg.properties.dynamic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["identifier", "title", "friendlyName", "maxContentlets", "code", "notes", "preLoop", "postLoop", "showOnMenu", "sortOrder", "sortContentletsBy", "structureInode", "containerStructures", "owner", "hostId", "staticify", "useDiv", "dynamic", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        identifier: typing.Union[MetaOapg.properties.identifier, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        friendlyName: typing.Union[MetaOapg.properties.friendlyName, str, schemas.Unset] = schemas.unset,
        maxContentlets: typing.Union[MetaOapg.properties.maxContentlets, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        preLoop: typing.Union[MetaOapg.properties.preLoop, str, schemas.Unset] = schemas.unset,
        postLoop: typing.Union[MetaOapg.properties.postLoop, str, schemas.Unset] = schemas.unset,
        showOnMenu: typing.Union[MetaOapg.properties.showOnMenu, bool, schemas.Unset] = schemas.unset,
        sortOrder: typing.Union[MetaOapg.properties.sortOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sortContentletsBy: typing.Union[MetaOapg.properties.sortContentletsBy, str, schemas.Unset] = schemas.unset,
        structureInode: typing.Union[MetaOapg.properties.structureInode, str, schemas.Unset] = schemas.unset,
        containerStructures: typing.Union[MetaOapg.properties.containerStructures, list, tuple, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        hostId: typing.Union[MetaOapg.properties.hostId, str, schemas.Unset] = schemas.unset,
        staticify: typing.Union[MetaOapg.properties.staticify, bool, schemas.Unset] = schemas.unset,
        useDiv: typing.Union[MetaOapg.properties.useDiv, bool, schemas.Unset] = schemas.unset,
        dynamic: typing.Union[MetaOapg.properties.dynamic, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContainerForm':
        return super().__new__(
            cls,
            *_args,
            identifier=identifier,
            title=title,
            friendlyName=friendlyName,
            maxContentlets=maxContentlets,
            code=code,
            notes=notes,
            preLoop=preLoop,
            postLoop=postLoop,
            showOnMenu=showOnMenu,
            sortOrder=sortOrder,
            sortContentletsBy=sortContentletsBy,
            structureInode=structureInode,
            containerStructures=containerStructures,
            owner=owner,
            hostId=hostId,
            staticify=staticify,
            useDiv=useDiv,
            dynamic=dynamic,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.container_structure import ContainerStructure
