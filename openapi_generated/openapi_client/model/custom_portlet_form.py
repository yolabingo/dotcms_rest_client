# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CustomPortletForm(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            portletId = schemas.StrSchema
            portletName = schemas.StrSchema
            baseTypes = schemas.StrSchema
            contentTypes = schemas.StrSchema
            dataViewMode = schemas.StrSchema
            __annotations__ = {
                "portletId": portletId,
                "portletName": portletName,
                "baseTypes": baseTypes,
                "contentTypes": contentTypes,
                "dataViewMode": dataViewMode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portletId"]) -> MetaOapg.properties.portletId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portletName"]) -> MetaOapg.properties.portletName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseTypes"]) -> MetaOapg.properties.baseTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentTypes"]) -> MetaOapg.properties.contentTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataViewMode"]) -> MetaOapg.properties.dataViewMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["portletId", "portletName", "baseTypes", "contentTypes", "dataViewMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portletId"]) -> typing.Union[MetaOapg.properties.portletId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portletName"]) -> typing.Union[MetaOapg.properties.portletName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseTypes"]) -> typing.Union[MetaOapg.properties.baseTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentTypes"]) -> typing.Union[MetaOapg.properties.contentTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataViewMode"]) -> typing.Union[MetaOapg.properties.dataViewMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["portletId", "portletName", "baseTypes", "contentTypes", "dataViewMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        portletId: typing.Union[MetaOapg.properties.portletId, str, schemas.Unset] = schemas.unset,
        portletName: typing.Union[MetaOapg.properties.portletName, str, schemas.Unset] = schemas.unset,
        baseTypes: typing.Union[MetaOapg.properties.baseTypes, str, schemas.Unset] = schemas.unset,
        contentTypes: typing.Union[MetaOapg.properties.contentTypes, str, schemas.Unset] = schemas.unset,
        dataViewMode: typing.Union[MetaOapg.properties.dataViewMode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomPortletForm':
        return super().__new__(
            cls,
            *_args,
            portletId=portletId,
            portletName=portletName,
            baseTypes=baseTypes,
            contentTypes=contentTypes,
            dataViewMode=dataViewMode,
            _configuration=_configuration,
            **kwargs,
        )
