# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TemplateLayoutView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            width = schemas.StrSchema
            title = schemas.StrSchema
            header = schemas.BoolSchema
            footer = schemas.BoolSchema
        
            @staticmethod
            def body() -> typing.Type['BodyView']:
                return BodyView
        
            @staticmethod
            def sidebar() -> typing.Type['SidebarView']:
                return SidebarView
            __annotations__ = {
                "width": width,
                "title": title,
                "header": header,
                "footer": footer,
                "body": body,
                "sidebar": sidebar,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["header"]) -> MetaOapg.properties.header: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["footer"]) -> MetaOapg.properties.footer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> 'BodyView': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sidebar"]) -> 'SidebarView': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["width", "title", "header", "footer", "body", "sidebar", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["header"]) -> typing.Union[MetaOapg.properties.header, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["footer"]) -> typing.Union[MetaOapg.properties.footer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union['BodyView', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sidebar"]) -> typing.Union['SidebarView', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["width", "title", "header", "footer", "body", "sidebar", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        width: typing.Union[MetaOapg.properties.width, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        header: typing.Union[MetaOapg.properties.header, bool, schemas.Unset] = schemas.unset,
        footer: typing.Union[MetaOapg.properties.footer, bool, schemas.Unset] = schemas.unset,
        body: typing.Union['BodyView', schemas.Unset] = schemas.unset,
        sidebar: typing.Union['SidebarView', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TemplateLayoutView':
        return super().__new__(
            cls,
            *_args,
            width=width,
            title=title,
            header=header,
            footer=footer,
            body=body,
            sidebar=sidebar,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.body_view import BodyView
from openapi_client.model.sidebar_view import SidebarView
