# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RestRuleAction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "actionlet",
            "owningRule",
        }
        
        class properties:
            owningRule = schemas.StrSchema
            actionlet = schemas.StrSchema
            priority = schemas.Int32Schema
            
            
            class parameters(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['ParameterModel']:
                        return ParameterModel
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'ParameterModel':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'ParameterModel':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'ParameterModel',
                ) -> 'parameters':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "owningRule": owningRule,
                "actionlet": actionlet,
                "priority": priority,
                "parameters": parameters,
            }
    
    actionlet: MetaOapg.properties.actionlet
    owningRule: MetaOapg.properties.owningRule
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owningRule"]) -> MetaOapg.properties.owningRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionlet"]) -> MetaOapg.properties.actionlet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameters"]) -> MetaOapg.properties.parameters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["owningRule", "actionlet", "priority", "parameters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owningRule"]) -> MetaOapg.properties.owningRule: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionlet"]) -> MetaOapg.properties.actionlet: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameters"]) -> typing.Union[MetaOapg.properties.parameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["owningRule", "actionlet", "priority", "parameters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        actionlet: typing.Union[MetaOapg.properties.actionlet, str, ],
        owningRule: typing.Union[MetaOapg.properties.owningRule, str, ],
        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        parameters: typing.Union[MetaOapg.properties.parameters, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RestRuleAction':
        return super().__new__(
            cls,
            *_args,
            actionlet=actionlet,
            owningRule=owningRule,
            priority=priority,
            parameters=parameters,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.parameter_model import ParameterModel
