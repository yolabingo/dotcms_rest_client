# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Sidebar(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class containers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ContainerUUID']:
                        return ContainerUUID
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ContainerUUID'], typing.List['ContainerUUID']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'containers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ContainerUUID':
                    return super().__getitem__(i)
            location = schemas.StrSchema
            width = schemas.StrSchema
            widthPercent = schemas.Int32Schema
            preview = schemas.BoolSchema
            __annotations__ = {
                "containers": containers,
                "location": location,
                "width": width,
                "widthPercent": widthPercent,
                "preview": preview,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containers"]) -> MetaOapg.properties.containers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["widthPercent"]) -> MetaOapg.properties.widthPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preview"]) -> MetaOapg.properties.preview: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["containers", "location", "width", "widthPercent", "preview", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containers"]) -> typing.Union[MetaOapg.properties.containers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["widthPercent"]) -> typing.Union[MetaOapg.properties.widthPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preview"]) -> typing.Union[MetaOapg.properties.preview, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["containers", "location", "width", "widthPercent", "preview", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        containers: typing.Union[MetaOapg.properties.containers, list, tuple, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        width: typing.Union[MetaOapg.properties.width, str, schemas.Unset] = schemas.unset,
        widthPercent: typing.Union[MetaOapg.properties.widthPercent, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        preview: typing.Union[MetaOapg.properties.preview, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Sidebar':
        return super().__new__(
            cls,
            *_args,
            containers=containers,
            location=location,
            width=width,
            widthPercent=widthPercent,
            preview=preview,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.container_uuid import ContainerUUID
