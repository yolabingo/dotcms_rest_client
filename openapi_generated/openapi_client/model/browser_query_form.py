# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class BrowserQueryForm(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            hostFolderId = schemas.StrSchema
            filter = schemas.StrSchema
            sortBy = schemas.StrSchema
            offset = schemas.Int32Schema
            maxResults = schemas.Int32Schema
            showWorking = schemas.BoolSchema
            showArchived = schemas.BoolSchema
            showFolders = schemas.BoolSchema
            showFiles = schemas.BoolSchema
            showPages = schemas.BoolSchema
            sortByDesc = schemas.BoolSchema
            showLinks = schemas.BoolSchema
            showDotAssets = schemas.BoolSchema
            languageId = schemas.Int64Schema
            
            
            class extensions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'extensions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class mimeTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mimeTypes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "hostFolderId": hostFolderId,
                "filter": filter,
                "sortBy": sortBy,
                "offset": offset,
                "maxResults": maxResults,
                "showWorking": showWorking,
                "showArchived": showArchived,
                "showFolders": showFolders,
                "showFiles": showFiles,
                "showPages": showPages,
                "sortByDesc": sortByDesc,
                "showLinks": showLinks,
                "showDotAssets": showDotAssets,
                "languageId": languageId,
                "extensions": extensions,
                "mimeTypes": mimeTypes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostFolderId"]) -> MetaOapg.properties.hostFolderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> MetaOapg.properties.filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortBy"]) -> MetaOapg.properties.sortBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offset"]) -> MetaOapg.properties.offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxResults"]) -> MetaOapg.properties.maxResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showWorking"]) -> MetaOapg.properties.showWorking: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showArchived"]) -> MetaOapg.properties.showArchived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showFolders"]) -> MetaOapg.properties.showFolders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showFiles"]) -> MetaOapg.properties.showFiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showPages"]) -> MetaOapg.properties.showPages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortByDesc"]) -> MetaOapg.properties.sortByDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showLinks"]) -> MetaOapg.properties.showLinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showDotAssets"]) -> MetaOapg.properties.showDotAssets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languageId"]) -> MetaOapg.properties.languageId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extensions"]) -> MetaOapg.properties.extensions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mimeTypes"]) -> MetaOapg.properties.mimeTypes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["hostFolderId", "filter", "sortBy", "offset", "maxResults", "showWorking", "showArchived", "showFolders", "showFiles", "showPages", "sortByDesc", "showLinks", "showDotAssets", "languageId", "extensions", "mimeTypes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostFolderId"]) -> typing.Union[MetaOapg.properties.hostFolderId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union[MetaOapg.properties.filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortBy"]) -> typing.Union[MetaOapg.properties.sortBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offset"]) -> typing.Union[MetaOapg.properties.offset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxResults"]) -> typing.Union[MetaOapg.properties.maxResults, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showWorking"]) -> typing.Union[MetaOapg.properties.showWorking, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showArchived"]) -> typing.Union[MetaOapg.properties.showArchived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showFolders"]) -> typing.Union[MetaOapg.properties.showFolders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showFiles"]) -> typing.Union[MetaOapg.properties.showFiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showPages"]) -> typing.Union[MetaOapg.properties.showPages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortByDesc"]) -> typing.Union[MetaOapg.properties.sortByDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showLinks"]) -> typing.Union[MetaOapg.properties.showLinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showDotAssets"]) -> typing.Union[MetaOapg.properties.showDotAssets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languageId"]) -> typing.Union[MetaOapg.properties.languageId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extensions"]) -> typing.Union[MetaOapg.properties.extensions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mimeTypes"]) -> typing.Union[MetaOapg.properties.mimeTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["hostFolderId", "filter", "sortBy", "offset", "maxResults", "showWorking", "showArchived", "showFolders", "showFiles", "showPages", "sortByDesc", "showLinks", "showDotAssets", "languageId", "extensions", "mimeTypes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        hostFolderId: typing.Union[MetaOapg.properties.hostFolderId, str, schemas.Unset] = schemas.unset,
        filter: typing.Union[MetaOapg.properties.filter, str, schemas.Unset] = schemas.unset,
        sortBy: typing.Union[MetaOapg.properties.sortBy, str, schemas.Unset] = schemas.unset,
        offset: typing.Union[MetaOapg.properties.offset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxResults: typing.Union[MetaOapg.properties.maxResults, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        showWorking: typing.Union[MetaOapg.properties.showWorking, bool, schemas.Unset] = schemas.unset,
        showArchived: typing.Union[MetaOapg.properties.showArchived, bool, schemas.Unset] = schemas.unset,
        showFolders: typing.Union[MetaOapg.properties.showFolders, bool, schemas.Unset] = schemas.unset,
        showFiles: typing.Union[MetaOapg.properties.showFiles, bool, schemas.Unset] = schemas.unset,
        showPages: typing.Union[MetaOapg.properties.showPages, bool, schemas.Unset] = schemas.unset,
        sortByDesc: typing.Union[MetaOapg.properties.sortByDesc, bool, schemas.Unset] = schemas.unset,
        showLinks: typing.Union[MetaOapg.properties.showLinks, bool, schemas.Unset] = schemas.unset,
        showDotAssets: typing.Union[MetaOapg.properties.showDotAssets, bool, schemas.Unset] = schemas.unset,
        languageId: typing.Union[MetaOapg.properties.languageId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        extensions: typing.Union[MetaOapg.properties.extensions, list, tuple, schemas.Unset] = schemas.unset,
        mimeTypes: typing.Union[MetaOapg.properties.mimeTypes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BrowserQueryForm':
        return super().__new__(
            cls,
            *_args,
            hostFolderId=hostFolderId,
            filter=filter,
            sortBy=sortBy,
            offset=offset,
            maxResults=maxResults,
            showWorking=showWorking,
            showArchived=showArchived,
            showFolders=showFolders,
            showFiles=showFiles,
            showPages=showPages,
            sortByDesc=sortByDesc,
            showLinks=showLinks,
            showDotAssets=showDotAssets,
            languageId=languageId,
            extensions=extensions,
            mimeTypes=mimeTypes,
            _configuration=_configuration,
            **kwargs,
        )
