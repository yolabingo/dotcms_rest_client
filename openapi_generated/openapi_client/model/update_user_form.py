# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class UpdateUserForm(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "surname",
            "givenName",
            "userId",
        }
        
        class properties:
            userId = schemas.StrSchema
            givenName = schemas.StrSchema
            surname = schemas.StrSchema
            email = schemas.StrSchema
            currentPassword = schemas.StrSchema
            newPassword = schemas.StrSchema
            __annotations__ = {
                "userId": userId,
                "givenName": givenName,
                "surname": surname,
                "email": email,
                "currentPassword": currentPassword,
                "newPassword": newPassword,
            }
    
    surname: MetaOapg.properties.surname
    givenName: MetaOapg.properties.givenName
    userId: MetaOapg.properties.userId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["givenName"]) -> MetaOapg.properties.givenName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surname"]) -> MetaOapg.properties.surname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPassword"]) -> MetaOapg.properties.currentPassword: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newPassword"]) -> MetaOapg.properties.newPassword: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["userId", "givenName", "surname", "email", "currentPassword", "newPassword", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["givenName"]) -> MetaOapg.properties.givenName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surname"]) -> MetaOapg.properties.surname: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPassword"]) -> typing.Union[MetaOapg.properties.currentPassword, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newPassword"]) -> typing.Union[MetaOapg.properties.newPassword, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["userId", "givenName", "surname", "email", "currentPassword", "newPassword", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        surname: typing.Union[MetaOapg.properties.surname, str, ],
        givenName: typing.Union[MetaOapg.properties.givenName, str, ],
        userId: typing.Union[MetaOapg.properties.userId, str, ],
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        currentPassword: typing.Union[MetaOapg.properties.currentPassword, str, schemas.Unset] = schemas.unset,
        newPassword: typing.Union[MetaOapg.properties.newPassword, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateUserForm':
        return super().__new__(
            cls,
            *_args,
            surname=surname,
            givenName=givenName,
            userId=userId,
            email=email,
            currentPassword=currentPassword,
            newPassword=newPassword,
            _configuration=_configuration,
            **kwargs,
        )
