# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ContentType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "clazz",
        }
        
        @staticmethod
        def discriminator():
            return {
                'clazz': {
                    'DotAssetContentType': DotAssetContentType,
                    'FileAssetContentType': FileAssetContentType,
                    'FormContentType': FormContentType,
                    'KeyValueContentType': KeyValueContentType,
                    'PageContentType': PageContentType,
                    'PersonaContentType': PersonaContentType,
                    'SimpleContentType': SimpleContentType,
                    'VanityUrlContentType': VanityUrlContentType,
                    'WidgetContentType': WidgetContentType,
                }
            }
        
        class properties:
            clazz = schemas.StrSchema
            owner = schemas.StrSchema
            __annotations__ = {
                "clazz": clazz,
                "owner": owner,
            }
    
    clazz: MetaOapg.properties.clazz
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clazz"]) -> MetaOapg.properties.clazz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clazz", "owner", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clazz"]) -> MetaOapg.properties.clazz: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clazz", "owner", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        clazz: typing.Union[MetaOapg.properties.clazz, str, ],
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContentType':
        return super().__new__(
            cls,
            *_args,
            clazz=clazz,
            owner=owner,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.dot_asset_content_type import DotAssetContentType
from openapi_client.model.file_asset_content_type import FileAssetContentType
from openapi_client.model.form_content_type import FormContentType
from openapi_client.model.key_value_content_type import KeyValueContentType
from openapi_client.model.page_content_type import PageContentType
from openapi_client.model.persona_content_type import PersonaContentType
from openapi_client.model.simple_content_type import SimpleContentType
from openapi_client.model.vanity_url_content_type import VanityUrlContentType
from openapi_client.model.widget_content_type import WidgetContentType
