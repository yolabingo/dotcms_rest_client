# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SystemActionWorkflowActionMapping(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            identifier = schemas.StrSchema
            
            
            class systemAction(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NEW": "NEW",
                        "EDIT": "EDIT",
                        "PUBLISH": "PUBLISH",
                        "UNPUBLISH": "UNPUBLISH",
                        "ARCHIVE": "ARCHIVE",
                        "UNARCHIVE": "UNARCHIVE",
                        "DELETE": "DELETE",
                        "DESTROY": "DESTROY",
                    }
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("NEW")
                
                @schemas.classproperty
                def EDIT(cls):
                    return cls("EDIT")
                
                @schemas.classproperty
                def PUBLISH(cls):
                    return cls("PUBLISH")
                
                @schemas.classproperty
                def UNPUBLISH(cls):
                    return cls("UNPUBLISH")
                
                @schemas.classproperty
                def ARCHIVE(cls):
                    return cls("ARCHIVE")
                
                @schemas.classproperty
                def UNARCHIVE(cls):
                    return cls("UNARCHIVE")
                
                @schemas.classproperty
                def DELETE(cls):
                    return cls("DELETE")
                
                @schemas.classproperty
                def DESTROY(cls):
                    return cls("DESTROY")
        
            @staticmethod
            def workflowAction() -> typing.Type['WorkflowAction']:
                return WorkflowAction
            owner = schemas.DictSchema
            ownerContentType = schemas.BoolSchema
            ownerScheme = schemas.BoolSchema
            __annotations__ = {
                "identifier": identifier,
                "systemAction": systemAction,
                "workflowAction": workflowAction,
                "owner": owner,
                "ownerContentType": ownerContentType,
                "ownerScheme": ownerScheme,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemAction"]) -> MetaOapg.properties.systemAction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowAction"]) -> 'WorkflowAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerContentType"]) -> MetaOapg.properties.ownerContentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerScheme"]) -> MetaOapg.properties.ownerScheme: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["identifier", "systemAction", "workflowAction", "owner", "ownerContentType", "ownerScheme", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> typing.Union[MetaOapg.properties.identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemAction"]) -> typing.Union[MetaOapg.properties.systemAction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowAction"]) -> typing.Union['WorkflowAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerContentType"]) -> typing.Union[MetaOapg.properties.ownerContentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerScheme"]) -> typing.Union[MetaOapg.properties.ownerScheme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["identifier", "systemAction", "workflowAction", "owner", "ownerContentType", "ownerScheme", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        identifier: typing.Union[MetaOapg.properties.identifier, str, schemas.Unset] = schemas.unset,
        systemAction: typing.Union[MetaOapg.properties.systemAction, str, schemas.Unset] = schemas.unset,
        workflowAction: typing.Union['WorkflowAction', schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ownerContentType: typing.Union[MetaOapg.properties.ownerContentType, bool, schemas.Unset] = schemas.unset,
        ownerScheme: typing.Union[MetaOapg.properties.ownerScheme, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SystemActionWorkflowActionMapping':
        return super().__new__(
            cls,
            *_args,
            identifier=identifier,
            systemAction=systemAction,
            workflowAction=workflowAction,
            owner=owner,
            ownerContentType=ownerContentType,
            ownerScheme=ownerScheme,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.workflow_action import WorkflowAction
