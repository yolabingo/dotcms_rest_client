# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dotcms_rest_client import schemas  # noqa: F401


class ContainerEntry(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            personaTag = schemas.StrSchema
            
            
            class contentIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contentIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            containerId = schemas.StrSchema
            containerUUID = schemas.StrSchema
            __annotations__ = {
                "personaTag": personaTag,
                "contentIds": contentIds,
                "containerId": containerId,
                "containerUUID": containerUUID,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personaTag"]) -> MetaOapg.properties.personaTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentIds"]) -> MetaOapg.properties.contentIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containerId"]) -> MetaOapg.properties.containerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containerUUID"]) -> MetaOapg.properties.containerUUID: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["personaTag", "contentIds", "containerId", "containerUUID", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personaTag"]) -> typing.Union[MetaOapg.properties.personaTag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentIds"]) -> typing.Union[MetaOapg.properties.contentIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containerId"]) -> typing.Union[MetaOapg.properties.containerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containerUUID"]) -> typing.Union[MetaOapg.properties.containerUUID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["personaTag", "contentIds", "containerId", "containerUUID", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        personaTag: typing.Union[MetaOapg.properties.personaTag, str, schemas.Unset] = schemas.unset,
        contentIds: typing.Union[MetaOapg.properties.contentIds, list, tuple, schemas.Unset] = schemas.unset,
        containerId: typing.Union[MetaOapg.properties.containerId, str, schemas.Unset] = schemas.unset,
        containerUUID: typing.Union[MetaOapg.properties.containerUUID, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContainerEntry':
        return super().__new__(
            cls,
            *_args,
            personaTag=personaTag,
            contentIds=contentIds,
            containerId=containerId,
            containerUUID=containerUUID,
            _configuration=_configuration,
            **kwargs,
        )
