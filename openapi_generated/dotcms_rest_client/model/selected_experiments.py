# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dotcms_rest_client import schemas  # noqa: F401


class SelectedExperiments(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class experiments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SelectedExperiment']:
                        return SelectedExperiment
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SelectedExperiment'], typing.List['SelectedExperiment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'experiments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SelectedExperiment':
                    return super().__getitem__(i)
            
            
            class includedExperimentIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'includedExperimentIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class excludedExperimentIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'excludedExperimentIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "experiments": experiments,
                "includedExperimentIds": includedExperimentIds,
                "excludedExperimentIds": excludedExperimentIds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["experiments"]) -> MetaOapg.properties.experiments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includedExperimentIds"]) -> MetaOapg.properties.includedExperimentIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludedExperimentIds"]) -> MetaOapg.properties.excludedExperimentIds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["experiments", "includedExperimentIds", "excludedExperimentIds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["experiments"]) -> typing.Union[MetaOapg.properties.experiments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includedExperimentIds"]) -> typing.Union[MetaOapg.properties.includedExperimentIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludedExperimentIds"]) -> typing.Union[MetaOapg.properties.excludedExperimentIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["experiments", "includedExperimentIds", "excludedExperimentIds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        experiments: typing.Union[MetaOapg.properties.experiments, list, tuple, schemas.Unset] = schemas.unset,
        includedExperimentIds: typing.Union[MetaOapg.properties.includedExperimentIds, list, tuple, schemas.Unset] = schemas.unset,
        excludedExperimentIds: typing.Union[MetaOapg.properties.excludedExperimentIds, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SelectedExperiments':
        return super().__new__(
            cls,
            *_args,
            experiments=experiments,
            includedExperimentIds=includedExperimentIds,
            excludedExperimentIds=excludedExperimentIds,
            _configuration=_configuration,
            **kwargs,
        )

from dotcms_rest_client.model.selected_experiment import SelectedExperiment
