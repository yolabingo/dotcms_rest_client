# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dotcms_rest_client import schemas  # noqa: F401


class WorkflowStep(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            creationDate = schemas.DateTimeSchema
            name = schemas.StrSchema
            schemeId = schemas.StrSchema
            myOrder = schemas.Int32Schema
            resolved = schemas.BoolSchema
            enableEscalation = schemas.BoolSchema
            escalationAction = schemas.StrSchema
            escalationTime = schemas.Int32Schema
            __annotations__ = {
                "id": id,
                "creationDate": creationDate,
                "name": name,
                "schemeId": schemeId,
                "myOrder": myOrder,
                "resolved": resolved,
                "enableEscalation": enableEscalation,
                "escalationAction": escalationAction,
                "escalationTime": escalationTime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationDate"]) -> MetaOapg.properties.creationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schemeId"]) -> MetaOapg.properties.schemeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["myOrder"]) -> MetaOapg.properties.myOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolved"]) -> MetaOapg.properties.resolved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableEscalation"]) -> MetaOapg.properties.enableEscalation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["escalationAction"]) -> MetaOapg.properties.escalationAction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["escalationTime"]) -> MetaOapg.properties.escalationTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "creationDate", "name", "schemeId", "myOrder", "resolved", "enableEscalation", "escalationAction", "escalationTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationDate"]) -> typing.Union[MetaOapg.properties.creationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schemeId"]) -> typing.Union[MetaOapg.properties.schemeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["myOrder"]) -> typing.Union[MetaOapg.properties.myOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolved"]) -> typing.Union[MetaOapg.properties.resolved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableEscalation"]) -> typing.Union[MetaOapg.properties.enableEscalation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["escalationAction"]) -> typing.Union[MetaOapg.properties.escalationAction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["escalationTime"]) -> typing.Union[MetaOapg.properties.escalationTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "creationDate", "name", "schemeId", "myOrder", "resolved", "enableEscalation", "escalationAction", "escalationTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        creationDate: typing.Union[MetaOapg.properties.creationDate, str, datetime, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        schemeId: typing.Union[MetaOapg.properties.schemeId, str, schemas.Unset] = schemas.unset,
        myOrder: typing.Union[MetaOapg.properties.myOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        resolved: typing.Union[MetaOapg.properties.resolved, bool, schemas.Unset] = schemas.unset,
        enableEscalation: typing.Union[MetaOapg.properties.enableEscalation, bool, schemas.Unset] = schemas.unset,
        escalationAction: typing.Union[MetaOapg.properties.escalationAction, str, schemas.Unset] = schemas.unset,
        escalationTime: typing.Union[MetaOapg.properties.escalationTime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowStep':
        return super().__new__(
            cls,
            *_args,
            id=id,
            creationDate=creationDate,
            name=name,
            schemeId=schemeId,
            myOrder=myOrder,
            resolved=resolved,
            enableEscalation=enableEscalation,
            escalationAction=escalationAction,
            escalationTime=escalationTime,
            _configuration=_configuration,
            **kwargs,
        )
