# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dotcms_rest_client import schemas  # noqa: F401


class WorkFlowActionlet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            actionClass = schemas.StrSchema
            howTo = schemas.StrSchema
            localizedHowto = schemas.StrSchema
            localizedName = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class parameters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowActionletParameter']:
                        return WorkflowActionletParameter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['WorkflowActionletParameter'], typing.List['WorkflowActionletParameter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parameters':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowActionletParameter':
                    return super().__getitem__(i)
            __annotations__ = {
                "actionClass": actionClass,
                "howTo": howTo,
                "localizedHowto": localizedHowto,
                "localizedName": localizedName,
                "name": name,
                "parameters": parameters,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionClass"]) -> MetaOapg.properties.actionClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["howTo"]) -> MetaOapg.properties.howTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localizedHowto"]) -> MetaOapg.properties.localizedHowto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localizedName"]) -> MetaOapg.properties.localizedName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameters"]) -> MetaOapg.properties.parameters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["actionClass", "howTo", "localizedHowto", "localizedName", "name", "parameters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionClass"]) -> typing.Union[MetaOapg.properties.actionClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["howTo"]) -> typing.Union[MetaOapg.properties.howTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localizedHowto"]) -> typing.Union[MetaOapg.properties.localizedHowto, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localizedName"]) -> typing.Union[MetaOapg.properties.localizedName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameters"]) -> typing.Union[MetaOapg.properties.parameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["actionClass", "howTo", "localizedHowto", "localizedName", "name", "parameters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        actionClass: typing.Union[MetaOapg.properties.actionClass, str, schemas.Unset] = schemas.unset,
        howTo: typing.Union[MetaOapg.properties.howTo, str, schemas.Unset] = schemas.unset,
        localizedHowto: typing.Union[MetaOapg.properties.localizedHowto, str, schemas.Unset] = schemas.unset,
        localizedName: typing.Union[MetaOapg.properties.localizedName, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        parameters: typing.Union[MetaOapg.properties.parameters, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkFlowActionlet':
        return super().__new__(
            cls,
            *_args,
            actionClass=actionClass,
            howTo=howTo,
            localizedHowto=localizedHowto,
            localizedName=localizedName,
            name=name,
            parameters=parameters,
            _configuration=_configuration,
            **kwargs,
        )

from dotcms_rest_client.model.workflow_actionlet_parameter import WorkflowActionletParameter
