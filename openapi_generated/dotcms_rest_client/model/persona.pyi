# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dotcms_rest_client import schemas  # noqa: F401


class Persona(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class map(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.DictSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                ) -> 'map':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            lowIndexPriority = schemas.BoolSchema
        
            @staticmethod
            def userAPI() -> typing.Type['UserAPI']:
                return UserAPI
            
            
            class indexPolicyDependencies(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DEFER(cls):
                    return cls("DEFER")
                
                @schemas.classproperty
                def WAIT_FOR(cls):
                    return cls("WAIT_FOR")
                
                @schemas.classproperty
                def FORCE(cls):
                    return cls("FORCE")
            description = schemas.StrSchema
            tags = schemas.StrSchema
            keyTag = schemas.StrSchema
            name = schemas.StrSchema
            identifier = schemas.StrSchema
            inode = schemas.StrSchema
            live = schemas.BoolSchema
            title = schemas.StrSchema
            working = schemas.BoolSchema
            archived = schemas.BoolSchema
            versionType = schemas.StrSchema
            modDate = schemas.DateTimeSchema
            versionId = schemas.StrSchema
            modUser = schemas.StrSchema
            locked = schemas.BoolSchema
            owner = schemas.StrSchema
            permissionId = schemas.StrSchema
            permissionType = schemas.StrSchema
            host = schemas.StrSchema
            new = schemas.BoolSchema
            languageId = schemas.Int64Schema
            folder = schemas.StrSchema
            fileAsset = schemas.BoolSchema
            structureInode = schemas.StrSchema
            systemHost = schemas.BoolSchema
            categoryId = schemas.StrSchema
            contentTypeId = schemas.StrSchema
            sortOrder = schemas.Int64Schema
        
            @staticmethod
            def titleImage() -> typing.Type['Field']:
                return Field
            htmlpage = schemas.BoolSchema
            dotAsset = schemas.BoolSchema
            persona = schemas.BoolSchema
            form = schemas.BoolSchema
            variantId = schemas.StrSchema
            vanityUrl = schemas.BoolSchema
            keyValue = schemas.BoolSchema
            type = schemas.StrSchema
            __annotations__ = {
                "map": map,
                "lowIndexPriority": lowIndexPriority,
                "userAPI": userAPI,
                "indexPolicyDependencies": indexPolicyDependencies,
                "description": description,
                "tags": tags,
                "keyTag": keyTag,
                "name": name,
                "identifier": identifier,
                "inode": inode,
                "live": live,
                "title": title,
                "working": working,
                "archived": archived,
                "versionType": versionType,
                "modDate": modDate,
                "versionId": versionId,
                "modUser": modUser,
                "locked": locked,
                "owner": owner,
                "permissionId": permissionId,
                "permissionType": permissionType,
                "host": host,
                "new": new,
                "languageId": languageId,
                "folder": folder,
                "fileAsset": fileAsset,
                "structureInode": structureInode,
                "systemHost": systemHost,
                "categoryId": categoryId,
                "contentTypeId": contentTypeId,
                "sortOrder": sortOrder,
                "titleImage": titleImage,
                "htmlpage": htmlpage,
                "dotAsset": dotAsset,
                "persona": persona,
                "form": form,
                "variantId": variantId,
                "vanityUrl": vanityUrl,
                "keyValue": keyValue,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["map"]) -> MetaOapg.properties.map: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lowIndexPriority"]) -> MetaOapg.properties.lowIndexPriority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userAPI"]) -> 'UserAPI': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["indexPolicyDependencies"]) -> MetaOapg.properties.indexPolicyDependencies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyTag"]) -> MetaOapg.properties.keyTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inode"]) -> MetaOapg.properties.inode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live"]) -> MetaOapg.properties.live: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["working"]) -> MetaOapg.properties.working: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionType"]) -> MetaOapg.properties.versionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modDate"]) -> MetaOapg.properties.modDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionId"]) -> MetaOapg.properties.versionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modUser"]) -> MetaOapg.properties.modUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissionId"]) -> MetaOapg.properties.permissionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissionType"]) -> MetaOapg.properties.permissionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new"]) -> MetaOapg.properties.new: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languageId"]) -> MetaOapg.properties.languageId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder"]) -> MetaOapg.properties.folder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileAsset"]) -> MetaOapg.properties.fileAsset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["structureInode"]) -> MetaOapg.properties.structureInode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemHost"]) -> MetaOapg.properties.systemHost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categoryId"]) -> MetaOapg.properties.categoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentTypeId"]) -> MetaOapg.properties.contentTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["titleImage"]) -> 'Field': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["htmlpage"]) -> MetaOapg.properties.htmlpage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dotAsset"]) -> MetaOapg.properties.dotAsset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persona"]) -> MetaOapg.properties.persona: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["form"]) -> MetaOapg.properties.form: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variantId"]) -> MetaOapg.properties.variantId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vanityUrl"]) -> MetaOapg.properties.vanityUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyValue"]) -> MetaOapg.properties.keyValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["map", "lowIndexPriority", "userAPI", "indexPolicyDependencies", "description", "tags", "keyTag", "name", "identifier", "inode", "live", "title", "working", "archived", "versionType", "modDate", "versionId", "modUser", "locked", "owner", "permissionId", "permissionType", "host", "new", "languageId", "folder", "fileAsset", "structureInode", "systemHost", "categoryId", "contentTypeId", "sortOrder", "titleImage", "htmlpage", "dotAsset", "persona", "form", "variantId", "vanityUrl", "keyValue", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["map"]) -> typing.Union[MetaOapg.properties.map, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lowIndexPriority"]) -> typing.Union[MetaOapg.properties.lowIndexPriority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userAPI"]) -> typing.Union['UserAPI', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["indexPolicyDependencies"]) -> typing.Union[MetaOapg.properties.indexPolicyDependencies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyTag"]) -> typing.Union[MetaOapg.properties.keyTag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> typing.Union[MetaOapg.properties.identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inode"]) -> typing.Union[MetaOapg.properties.inode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live"]) -> typing.Union[MetaOapg.properties.live, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["working"]) -> typing.Union[MetaOapg.properties.working, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionType"]) -> typing.Union[MetaOapg.properties.versionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modDate"]) -> typing.Union[MetaOapg.properties.modDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionId"]) -> typing.Union[MetaOapg.properties.versionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modUser"]) -> typing.Union[MetaOapg.properties.modUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> typing.Union[MetaOapg.properties.locked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissionId"]) -> typing.Union[MetaOapg.properties.permissionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissionType"]) -> typing.Union[MetaOapg.properties.permissionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> typing.Union[MetaOapg.properties.host, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new"]) -> typing.Union[MetaOapg.properties.new, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languageId"]) -> typing.Union[MetaOapg.properties.languageId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder"]) -> typing.Union[MetaOapg.properties.folder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileAsset"]) -> typing.Union[MetaOapg.properties.fileAsset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["structureInode"]) -> typing.Union[MetaOapg.properties.structureInode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemHost"]) -> typing.Union[MetaOapg.properties.systemHost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categoryId"]) -> typing.Union[MetaOapg.properties.categoryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentTypeId"]) -> typing.Union[MetaOapg.properties.contentTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortOrder"]) -> typing.Union[MetaOapg.properties.sortOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["titleImage"]) -> typing.Union['Field', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["htmlpage"]) -> typing.Union[MetaOapg.properties.htmlpage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dotAsset"]) -> typing.Union[MetaOapg.properties.dotAsset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persona"]) -> typing.Union[MetaOapg.properties.persona, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["form"]) -> typing.Union[MetaOapg.properties.form, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variantId"]) -> typing.Union[MetaOapg.properties.variantId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vanityUrl"]) -> typing.Union[MetaOapg.properties.vanityUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyValue"]) -> typing.Union[MetaOapg.properties.keyValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["map", "lowIndexPriority", "userAPI", "indexPolicyDependencies", "description", "tags", "keyTag", "name", "identifier", "inode", "live", "title", "working", "archived", "versionType", "modDate", "versionId", "modUser", "locked", "owner", "permissionId", "permissionType", "host", "new", "languageId", "folder", "fileAsset", "structureInode", "systemHost", "categoryId", "contentTypeId", "sortOrder", "titleImage", "htmlpage", "dotAsset", "persona", "form", "variantId", "vanityUrl", "keyValue", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        map: typing.Union[MetaOapg.properties.map, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        lowIndexPriority: typing.Union[MetaOapg.properties.lowIndexPriority, bool, schemas.Unset] = schemas.unset,
        userAPI: typing.Union['UserAPI', schemas.Unset] = schemas.unset,
        indexPolicyDependencies: typing.Union[MetaOapg.properties.indexPolicyDependencies, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, str, schemas.Unset] = schemas.unset,
        keyTag: typing.Union[MetaOapg.properties.keyTag, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        identifier: typing.Union[MetaOapg.properties.identifier, str, schemas.Unset] = schemas.unset,
        inode: typing.Union[MetaOapg.properties.inode, str, schemas.Unset] = schemas.unset,
        live: typing.Union[MetaOapg.properties.live, bool, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        working: typing.Union[MetaOapg.properties.working, bool, schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        versionType: typing.Union[MetaOapg.properties.versionType, str, schemas.Unset] = schemas.unset,
        modDate: typing.Union[MetaOapg.properties.modDate, str, datetime, schemas.Unset] = schemas.unset,
        versionId: typing.Union[MetaOapg.properties.versionId, str, schemas.Unset] = schemas.unset,
        modUser: typing.Union[MetaOapg.properties.modUser, str, schemas.Unset] = schemas.unset,
        locked: typing.Union[MetaOapg.properties.locked, bool, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        permissionId: typing.Union[MetaOapg.properties.permissionId, str, schemas.Unset] = schemas.unset,
        permissionType: typing.Union[MetaOapg.properties.permissionType, str, schemas.Unset] = schemas.unset,
        host: typing.Union[MetaOapg.properties.host, str, schemas.Unset] = schemas.unset,
        new: typing.Union[MetaOapg.properties.new, bool, schemas.Unset] = schemas.unset,
        languageId: typing.Union[MetaOapg.properties.languageId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        folder: typing.Union[MetaOapg.properties.folder, str, schemas.Unset] = schemas.unset,
        fileAsset: typing.Union[MetaOapg.properties.fileAsset, bool, schemas.Unset] = schemas.unset,
        structureInode: typing.Union[MetaOapg.properties.structureInode, str, schemas.Unset] = schemas.unset,
        systemHost: typing.Union[MetaOapg.properties.systemHost, bool, schemas.Unset] = schemas.unset,
        categoryId: typing.Union[MetaOapg.properties.categoryId, str, schemas.Unset] = schemas.unset,
        contentTypeId: typing.Union[MetaOapg.properties.contentTypeId, str, schemas.Unset] = schemas.unset,
        sortOrder: typing.Union[MetaOapg.properties.sortOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        titleImage: typing.Union['Field', schemas.Unset] = schemas.unset,
        htmlpage: typing.Union[MetaOapg.properties.htmlpage, bool, schemas.Unset] = schemas.unset,
        dotAsset: typing.Union[MetaOapg.properties.dotAsset, bool, schemas.Unset] = schemas.unset,
        persona: typing.Union[MetaOapg.properties.persona, bool, schemas.Unset] = schemas.unset,
        form: typing.Union[MetaOapg.properties.form, bool, schemas.Unset] = schemas.unset,
        variantId: typing.Union[MetaOapg.properties.variantId, str, schemas.Unset] = schemas.unset,
        vanityUrl: typing.Union[MetaOapg.properties.vanityUrl, bool, schemas.Unset] = schemas.unset,
        keyValue: typing.Union[MetaOapg.properties.keyValue, bool, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Persona':
        return super().__new__(
            cls,
            *_args,
            map=map,
            lowIndexPriority=lowIndexPriority,
            userAPI=userAPI,
            indexPolicyDependencies=indexPolicyDependencies,
            description=description,
            tags=tags,
            keyTag=keyTag,
            name=name,
            identifier=identifier,
            inode=inode,
            live=live,
            title=title,
            working=working,
            archived=archived,
            versionType=versionType,
            modDate=modDate,
            versionId=versionId,
            modUser=modUser,
            locked=locked,
            owner=owner,
            permissionId=permissionId,
            permissionType=permissionType,
            host=host,
            new=new,
            languageId=languageId,
            folder=folder,
            fileAsset=fileAsset,
            structureInode=structureInode,
            systemHost=systemHost,
            categoryId=categoryId,
            contentTypeId=contentTypeId,
            sortOrder=sortOrder,
            titleImage=titleImage,
            htmlpage=htmlpage,
            dotAsset=dotAsset,
            persona=persona,
            form=form,
            variantId=variantId,
            vanityUrl=vanityUrl,
            keyValue=keyValue,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from dotcms_rest_client.model.field import Field
from dotcms_rest_client.model.user_api import UserAPI
