# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dotcms_rest_client import schemas  # noqa: F401


class ApiTokenForm(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            userId = schemas.StrSchema
            tokenId = schemas.StrSchema
            showRevoked = schemas.BoolSchema
            expirationSeconds = schemas.Int32Schema
            network = schemas.StrSchema
            
            
            class claims(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.DictSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                ) -> 'claims':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            shouldBeAdmin = schemas.BoolSchema
            __annotations__ = {
                "userId": userId,
                "tokenId": tokenId,
                "showRevoked": showRevoked,
                "expirationSeconds": expirationSeconds,
                "network": network,
                "claims": claims,
                "shouldBeAdmin": shouldBeAdmin,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenId"]) -> MetaOapg.properties.tokenId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showRevoked"]) -> MetaOapg.properties.showRevoked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationSeconds"]) -> MetaOapg.properties.expirationSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> MetaOapg.properties.network: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["claims"]) -> MetaOapg.properties.claims: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shouldBeAdmin"]) -> MetaOapg.properties.shouldBeAdmin: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["userId", "tokenId", "showRevoked", "expirationSeconds", "network", "claims", "shouldBeAdmin", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenId"]) -> typing.Union[MetaOapg.properties.tokenId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showRevoked"]) -> typing.Union[MetaOapg.properties.showRevoked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationSeconds"]) -> typing.Union[MetaOapg.properties.expirationSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> typing.Union[MetaOapg.properties.network, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["claims"]) -> typing.Union[MetaOapg.properties.claims, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shouldBeAdmin"]) -> typing.Union[MetaOapg.properties.shouldBeAdmin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["userId", "tokenId", "showRevoked", "expirationSeconds", "network", "claims", "shouldBeAdmin", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        tokenId: typing.Union[MetaOapg.properties.tokenId, str, schemas.Unset] = schemas.unset,
        showRevoked: typing.Union[MetaOapg.properties.showRevoked, bool, schemas.Unset] = schemas.unset,
        expirationSeconds: typing.Union[MetaOapg.properties.expirationSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        network: typing.Union[MetaOapg.properties.network, str, schemas.Unset] = schemas.unset,
        claims: typing.Union[MetaOapg.properties.claims, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        shouldBeAdmin: typing.Union[MetaOapg.properties.shouldBeAdmin, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiTokenForm':
        return super().__new__(
            cls,
            *_args,
            userId=userId,
            tokenId=tokenId,
            showRevoked=showRevoked,
            expirationSeconds=expirationSeconds,
            network=network,
            claims=claims,
            shouldBeAdmin=shouldBeAdmin,
            _configuration=_configuration,
            **kwargs,
        )
