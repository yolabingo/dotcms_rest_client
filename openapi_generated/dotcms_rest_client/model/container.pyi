# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dotcms_rest_client import schemas  # noqa: F401


class Container(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            getiDate = schemas.DateTimeSchema
            type = schemas.StrSchema
            owner = schemas.StrSchema
            inode = schemas.StrSchema
            identifier = schemas.StrSchema
            
            
            class source(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("UNKNOWN")
                
                @schemas.classproperty
                def DB(cls):
                    return cls("DB")
                
                @schemas.classproperty
                def FILE(cls):
                    return cls("FILE")
            title = schemas.StrSchema
            friendlyName = schemas.StrSchema
            modDate = schemas.DateTimeSchema
            modUser = schemas.StrSchema
            sortOrder = schemas.Int32Schema
            showOnMenu = schemas.BoolSchema
            code = schemas.StrSchema
            maxContentlets = schemas.Int32Schema
            useDiv = schemas.BoolSchema
            sortContentletsBy = schemas.StrSchema
            preLoop = schemas.StrSchema
            postLoop = schemas.StrSchema
            staticify = schemas.BoolSchema
            luceneQuery = schemas.StrSchema
            notes = schemas.StrSchema
        
            @staticmethod
            def parentPermissionable() -> typing.Type['Permissionable']:
                return Permissionable
            live = schemas.BoolSchema
            deleted = schemas.BoolSchema
            working = schemas.BoolSchema
            archived = schemas.BoolSchema
            versionType = schemas.StrSchema
            permissionId = schemas.StrSchema
            versionId = schemas.StrSchema
            name = schemas.StrSchema
            locked = schemas.BoolSchema
            permissionType = schemas.StrSchema
            new = schemas.BoolSchema
            
            
            class parents(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parents':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            categoryId = schemas.StrSchema
            idate = schemas.DateTimeSchema
            __annotations__ = {
                "getiDate": getiDate,
                "type": type,
                "owner": owner,
                "inode": inode,
                "identifier": identifier,
                "source": source,
                "title": title,
                "friendlyName": friendlyName,
                "modDate": modDate,
                "modUser": modUser,
                "sortOrder": sortOrder,
                "showOnMenu": showOnMenu,
                "code": code,
                "maxContentlets": maxContentlets,
                "useDiv": useDiv,
                "sortContentletsBy": sortContentletsBy,
                "preLoop": preLoop,
                "postLoop": postLoop,
                "staticify": staticify,
                "luceneQuery": luceneQuery,
                "notes": notes,
                "parentPermissionable": parentPermissionable,
                "live": live,
                "deleted": deleted,
                "working": working,
                "archived": archived,
                "versionType": versionType,
                "permissionId": permissionId,
                "versionId": versionId,
                "name": name,
                "locked": locked,
                "permissionType": permissionType,
                "new": new,
                "parents": parents,
                "categoryId": categoryId,
                "idate": idate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["getiDate"]) -> MetaOapg.properties.getiDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inode"]) -> MetaOapg.properties.inode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["friendlyName"]) -> MetaOapg.properties.friendlyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modDate"]) -> MetaOapg.properties.modDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modUser"]) -> MetaOapg.properties.modUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showOnMenu"]) -> MetaOapg.properties.showOnMenu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxContentlets"]) -> MetaOapg.properties.maxContentlets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useDiv"]) -> MetaOapg.properties.useDiv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortContentletsBy"]) -> MetaOapg.properties.sortContentletsBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preLoop"]) -> MetaOapg.properties.preLoop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postLoop"]) -> MetaOapg.properties.postLoop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staticify"]) -> MetaOapg.properties.staticify: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["luceneQuery"]) -> MetaOapg.properties.luceneQuery: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentPermissionable"]) -> 'Permissionable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live"]) -> MetaOapg.properties.live: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["working"]) -> MetaOapg.properties.working: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionType"]) -> MetaOapg.properties.versionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissionId"]) -> MetaOapg.properties.permissionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionId"]) -> MetaOapg.properties.versionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissionType"]) -> MetaOapg.properties.permissionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new"]) -> MetaOapg.properties.new: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parents"]) -> MetaOapg.properties.parents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categoryId"]) -> MetaOapg.properties.categoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idate"]) -> MetaOapg.properties.idate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["getiDate", "type", "owner", "inode", "identifier", "source", "title", "friendlyName", "modDate", "modUser", "sortOrder", "showOnMenu", "code", "maxContentlets", "useDiv", "sortContentletsBy", "preLoop", "postLoop", "staticify", "luceneQuery", "notes", "parentPermissionable", "live", "deleted", "working", "archived", "versionType", "permissionId", "versionId", "name", "locked", "permissionType", "new", "parents", "categoryId", "idate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["getiDate"]) -> typing.Union[MetaOapg.properties.getiDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inode"]) -> typing.Union[MetaOapg.properties.inode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> typing.Union[MetaOapg.properties.identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["friendlyName"]) -> typing.Union[MetaOapg.properties.friendlyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modDate"]) -> typing.Union[MetaOapg.properties.modDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modUser"]) -> typing.Union[MetaOapg.properties.modUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortOrder"]) -> typing.Union[MetaOapg.properties.sortOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showOnMenu"]) -> typing.Union[MetaOapg.properties.showOnMenu, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxContentlets"]) -> typing.Union[MetaOapg.properties.maxContentlets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useDiv"]) -> typing.Union[MetaOapg.properties.useDiv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortContentletsBy"]) -> typing.Union[MetaOapg.properties.sortContentletsBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preLoop"]) -> typing.Union[MetaOapg.properties.preLoop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postLoop"]) -> typing.Union[MetaOapg.properties.postLoop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staticify"]) -> typing.Union[MetaOapg.properties.staticify, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["luceneQuery"]) -> typing.Union[MetaOapg.properties.luceneQuery, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentPermissionable"]) -> typing.Union['Permissionable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live"]) -> typing.Union[MetaOapg.properties.live, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["working"]) -> typing.Union[MetaOapg.properties.working, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionType"]) -> typing.Union[MetaOapg.properties.versionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissionId"]) -> typing.Union[MetaOapg.properties.permissionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionId"]) -> typing.Union[MetaOapg.properties.versionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> typing.Union[MetaOapg.properties.locked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissionType"]) -> typing.Union[MetaOapg.properties.permissionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new"]) -> typing.Union[MetaOapg.properties.new, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parents"]) -> typing.Union[MetaOapg.properties.parents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categoryId"]) -> typing.Union[MetaOapg.properties.categoryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idate"]) -> typing.Union[MetaOapg.properties.idate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["getiDate", "type", "owner", "inode", "identifier", "source", "title", "friendlyName", "modDate", "modUser", "sortOrder", "showOnMenu", "code", "maxContentlets", "useDiv", "sortContentletsBy", "preLoop", "postLoop", "staticify", "luceneQuery", "notes", "parentPermissionable", "live", "deleted", "working", "archived", "versionType", "permissionId", "versionId", "name", "locked", "permissionType", "new", "parents", "categoryId", "idate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        getiDate: typing.Union[MetaOapg.properties.getiDate, str, datetime, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        inode: typing.Union[MetaOapg.properties.inode, str, schemas.Unset] = schemas.unset,
        identifier: typing.Union[MetaOapg.properties.identifier, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        friendlyName: typing.Union[MetaOapg.properties.friendlyName, str, schemas.Unset] = schemas.unset,
        modDate: typing.Union[MetaOapg.properties.modDate, str, datetime, schemas.Unset] = schemas.unset,
        modUser: typing.Union[MetaOapg.properties.modUser, str, schemas.Unset] = schemas.unset,
        sortOrder: typing.Union[MetaOapg.properties.sortOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        showOnMenu: typing.Union[MetaOapg.properties.showOnMenu, bool, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        maxContentlets: typing.Union[MetaOapg.properties.maxContentlets, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        useDiv: typing.Union[MetaOapg.properties.useDiv, bool, schemas.Unset] = schemas.unset,
        sortContentletsBy: typing.Union[MetaOapg.properties.sortContentletsBy, str, schemas.Unset] = schemas.unset,
        preLoop: typing.Union[MetaOapg.properties.preLoop, str, schemas.Unset] = schemas.unset,
        postLoop: typing.Union[MetaOapg.properties.postLoop, str, schemas.Unset] = schemas.unset,
        staticify: typing.Union[MetaOapg.properties.staticify, bool, schemas.Unset] = schemas.unset,
        luceneQuery: typing.Union[MetaOapg.properties.luceneQuery, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        parentPermissionable: typing.Union['Permissionable', schemas.Unset] = schemas.unset,
        live: typing.Union[MetaOapg.properties.live, bool, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        working: typing.Union[MetaOapg.properties.working, bool, schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        versionType: typing.Union[MetaOapg.properties.versionType, str, schemas.Unset] = schemas.unset,
        permissionId: typing.Union[MetaOapg.properties.permissionId, str, schemas.Unset] = schemas.unset,
        versionId: typing.Union[MetaOapg.properties.versionId, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        locked: typing.Union[MetaOapg.properties.locked, bool, schemas.Unset] = schemas.unset,
        permissionType: typing.Union[MetaOapg.properties.permissionType, str, schemas.Unset] = schemas.unset,
        new: typing.Union[MetaOapg.properties.new, bool, schemas.Unset] = schemas.unset,
        parents: typing.Union[MetaOapg.properties.parents, list, tuple, schemas.Unset] = schemas.unset,
        categoryId: typing.Union[MetaOapg.properties.categoryId, str, schemas.Unset] = schemas.unset,
        idate: typing.Union[MetaOapg.properties.idate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Container':
        return super().__new__(
            cls,
            *_args,
            getiDate=getiDate,
            type=type,
            owner=owner,
            inode=inode,
            identifier=identifier,
            source=source,
            title=title,
            friendlyName=friendlyName,
            modDate=modDate,
            modUser=modUser,
            sortOrder=sortOrder,
            showOnMenu=showOnMenu,
            code=code,
            maxContentlets=maxContentlets,
            useDiv=useDiv,
            sortContentletsBy=sortContentletsBy,
            preLoop=preLoop,
            postLoop=postLoop,
            staticify=staticify,
            luceneQuery=luceneQuery,
            notes=notes,
            parentPermissionable=parentPermissionable,
            live=live,
            deleted=deleted,
            working=working,
            archived=archived,
            versionType=versionType,
            permissionId=permissionId,
            versionId=versionId,
            name=name,
            locked=locked,
            permissionType=permissionType,
            new=new,
            parents=parents,
            categoryId=categoryId,
            idate=idate,
            _configuration=_configuration,
            **kwargs,
        )

from dotcms_rest_client.model.permissionable import Permissionable
