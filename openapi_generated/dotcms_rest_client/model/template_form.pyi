# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dotcms_rest_client import schemas  # noqa: F401


class TemplateForm(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "title",
        }
        
        class properties:
            title = schemas.StrSchema
            siteId = schemas.StrSchema
            identifier = schemas.StrSchema
            inode = schemas.StrSchema
            body = schemas.StrSchema
            selectedimage = schemas.StrSchema
            image = schemas.StrSchema
            drawed = schemas.BoolSchema
            showOnMenu = schemas.BoolSchema
            drawedBody = schemas.StrSchema
            countAddContainer = schemas.Int32Schema
            countContainers = schemas.Int32Schema
            headCode = schemas.StrSchema
            theme = schemas.StrSchema
            themeName = schemas.StrSchema
            footer = schemas.StrSchema
            friendlyName = schemas.StrSchema
            header = schemas.StrSchema
            name = schemas.StrSchema
            sortOrder = schemas.Int32Schema
            headerCheck = schemas.BoolSchema
            footerCheck = schemas.BoolSchema
        
            @staticmethod
            def layout() -> typing.Type['TemplateLayoutView']:
                return TemplateLayoutView
            __annotations__ = {
                "title": title,
                "siteId": siteId,
                "identifier": identifier,
                "inode": inode,
                "body": body,
                "selectedimage": selectedimage,
                "image": image,
                "drawed": drawed,
                "showOnMenu": showOnMenu,
                "drawedBody": drawedBody,
                "countAddContainer": countAddContainer,
                "countContainers": countContainers,
                "headCode": headCode,
                "theme": theme,
                "themeName": themeName,
                "footer": footer,
                "friendlyName": friendlyName,
                "header": header,
                "name": name,
                "sortOrder": sortOrder,
                "headerCheck": headerCheck,
                "footerCheck": footerCheck,
                "layout": layout,
            }
    
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["siteId"]) -> MetaOapg.properties.siteId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inode"]) -> MetaOapg.properties.inode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selectedimage"]) -> MetaOapg.properties.selectedimage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drawed"]) -> MetaOapg.properties.drawed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showOnMenu"]) -> MetaOapg.properties.showOnMenu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drawedBody"]) -> MetaOapg.properties.drawedBody: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countAddContainer"]) -> MetaOapg.properties.countAddContainer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countContainers"]) -> MetaOapg.properties.countContainers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["headCode"]) -> MetaOapg.properties.headCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["theme"]) -> MetaOapg.properties.theme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["themeName"]) -> MetaOapg.properties.themeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["footer"]) -> MetaOapg.properties.footer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["friendlyName"]) -> MetaOapg.properties.friendlyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["header"]) -> MetaOapg.properties.header: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["headerCheck"]) -> MetaOapg.properties.headerCheck: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["footerCheck"]) -> MetaOapg.properties.footerCheck: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layout"]) -> 'TemplateLayoutView': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "siteId", "identifier", "inode", "body", "selectedimage", "image", "drawed", "showOnMenu", "drawedBody", "countAddContainer", "countContainers", "headCode", "theme", "themeName", "footer", "friendlyName", "header", "name", "sortOrder", "headerCheck", "footerCheck", "layout", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["siteId"]) -> typing.Union[MetaOapg.properties.siteId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> typing.Union[MetaOapg.properties.identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inode"]) -> typing.Union[MetaOapg.properties.inode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selectedimage"]) -> typing.Union[MetaOapg.properties.selectedimage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union[MetaOapg.properties.image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drawed"]) -> typing.Union[MetaOapg.properties.drawed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showOnMenu"]) -> typing.Union[MetaOapg.properties.showOnMenu, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drawedBody"]) -> typing.Union[MetaOapg.properties.drawedBody, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countAddContainer"]) -> typing.Union[MetaOapg.properties.countAddContainer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countContainers"]) -> typing.Union[MetaOapg.properties.countContainers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["headCode"]) -> typing.Union[MetaOapg.properties.headCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["theme"]) -> typing.Union[MetaOapg.properties.theme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["themeName"]) -> typing.Union[MetaOapg.properties.themeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["footer"]) -> typing.Union[MetaOapg.properties.footer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["friendlyName"]) -> typing.Union[MetaOapg.properties.friendlyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["header"]) -> typing.Union[MetaOapg.properties.header, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortOrder"]) -> typing.Union[MetaOapg.properties.sortOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["headerCheck"]) -> typing.Union[MetaOapg.properties.headerCheck, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["footerCheck"]) -> typing.Union[MetaOapg.properties.footerCheck, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layout"]) -> typing.Union['TemplateLayoutView', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "siteId", "identifier", "inode", "body", "selectedimage", "image", "drawed", "showOnMenu", "drawedBody", "countAddContainer", "countContainers", "headCode", "theme", "themeName", "footer", "friendlyName", "header", "name", "sortOrder", "headerCheck", "footerCheck", "layout", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        siteId: typing.Union[MetaOapg.properties.siteId, str, schemas.Unset] = schemas.unset,
        identifier: typing.Union[MetaOapg.properties.identifier, str, schemas.Unset] = schemas.unset,
        inode: typing.Union[MetaOapg.properties.inode, str, schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        selectedimage: typing.Union[MetaOapg.properties.selectedimage, str, schemas.Unset] = schemas.unset,
        image: typing.Union[MetaOapg.properties.image, str, schemas.Unset] = schemas.unset,
        drawed: typing.Union[MetaOapg.properties.drawed, bool, schemas.Unset] = schemas.unset,
        showOnMenu: typing.Union[MetaOapg.properties.showOnMenu, bool, schemas.Unset] = schemas.unset,
        drawedBody: typing.Union[MetaOapg.properties.drawedBody, str, schemas.Unset] = schemas.unset,
        countAddContainer: typing.Union[MetaOapg.properties.countAddContainer, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        countContainers: typing.Union[MetaOapg.properties.countContainers, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        headCode: typing.Union[MetaOapg.properties.headCode, str, schemas.Unset] = schemas.unset,
        theme: typing.Union[MetaOapg.properties.theme, str, schemas.Unset] = schemas.unset,
        themeName: typing.Union[MetaOapg.properties.themeName, str, schemas.Unset] = schemas.unset,
        footer: typing.Union[MetaOapg.properties.footer, str, schemas.Unset] = schemas.unset,
        friendlyName: typing.Union[MetaOapg.properties.friendlyName, str, schemas.Unset] = schemas.unset,
        header: typing.Union[MetaOapg.properties.header, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        sortOrder: typing.Union[MetaOapg.properties.sortOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        headerCheck: typing.Union[MetaOapg.properties.headerCheck, bool, schemas.Unset] = schemas.unset,
        footerCheck: typing.Union[MetaOapg.properties.footerCheck, bool, schemas.Unset] = schemas.unset,
        layout: typing.Union['TemplateLayoutView', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TemplateForm':
        return super().__new__(
            cls,
            *_args,
            title=title,
            siteId=siteId,
            identifier=identifier,
            inode=inode,
            body=body,
            selectedimage=selectedimage,
            image=image,
            drawed=drawed,
            showOnMenu=showOnMenu,
            drawedBody=drawedBody,
            countAddContainer=countAddContainer,
            countContainers=countContainers,
            headCode=headCode,
            theme=theme,
            themeName=themeName,
            footer=footer,
            friendlyName=friendlyName,
            header=header,
            name=name,
            sortOrder=sortOrder,
            headerCheck=headerCheck,
            footerCheck=footerCheck,
            layout=layout,
            _configuration=_configuration,
            **kwargs,
        )

from dotcms_rest_client.model.template_layout_view import TemplateLayoutView
