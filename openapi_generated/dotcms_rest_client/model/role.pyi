# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dotcms_rest_client import schemas  # noqa: F401


class Role(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            description = schemas.StrSchema
            roleKey = schemas.StrSchema
            parent = schemas.StrSchema
            editPermissions = schemas.BoolSchema
            editUsers = schemas.BoolSchema
            editLayouts = schemas.BoolSchema
            locked = schemas.BoolSchema
            system = schemas.BoolSchema
            
            
            class roleChildren(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roleChildren':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            fqn = schemas.StrSchema
            dbfqn = schemas.StrSchema
            user = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "description": description,
                "roleKey": roleKey,
                "parent": parent,
                "editPermissions": editPermissions,
                "editUsers": editUsers,
                "editLayouts": editLayouts,
                "locked": locked,
                "system": system,
                "roleChildren": roleChildren,
                "fqn": fqn,
                "dbfqn": dbfqn,
                "user": user,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleKey"]) -> MetaOapg.properties.roleKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editPermissions"]) -> MetaOapg.properties.editPermissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editUsers"]) -> MetaOapg.properties.editUsers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editLayouts"]) -> MetaOapg.properties.editLayouts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleChildren"]) -> MetaOapg.properties.roleChildren: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fqn"]) -> MetaOapg.properties.fqn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dbfqn"]) -> MetaOapg.properties.dbfqn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "description", "roleKey", "parent", "editPermissions", "editUsers", "editLayouts", "locked", "system", "roleChildren", "fqn", "dbfqn", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleKey"]) -> typing.Union[MetaOapg.properties.roleKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union[MetaOapg.properties.parent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editPermissions"]) -> typing.Union[MetaOapg.properties.editPermissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editUsers"]) -> typing.Union[MetaOapg.properties.editUsers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editLayouts"]) -> typing.Union[MetaOapg.properties.editLayouts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> typing.Union[MetaOapg.properties.locked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> typing.Union[MetaOapg.properties.system, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleChildren"]) -> typing.Union[MetaOapg.properties.roleChildren, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fqn"]) -> typing.Union[MetaOapg.properties.fqn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dbfqn"]) -> typing.Union[MetaOapg.properties.dbfqn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "description", "roleKey", "parent", "editPermissions", "editUsers", "editLayouts", "locked", "system", "roleChildren", "fqn", "dbfqn", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        roleKey: typing.Union[MetaOapg.properties.roleKey, str, schemas.Unset] = schemas.unset,
        parent: typing.Union[MetaOapg.properties.parent, str, schemas.Unset] = schemas.unset,
        editPermissions: typing.Union[MetaOapg.properties.editPermissions, bool, schemas.Unset] = schemas.unset,
        editUsers: typing.Union[MetaOapg.properties.editUsers, bool, schemas.Unset] = schemas.unset,
        editLayouts: typing.Union[MetaOapg.properties.editLayouts, bool, schemas.Unset] = schemas.unset,
        locked: typing.Union[MetaOapg.properties.locked, bool, schemas.Unset] = schemas.unset,
        system: typing.Union[MetaOapg.properties.system, bool, schemas.Unset] = schemas.unset,
        roleChildren: typing.Union[MetaOapg.properties.roleChildren, list, tuple, schemas.Unset] = schemas.unset,
        fqn: typing.Union[MetaOapg.properties.fqn, str, schemas.Unset] = schemas.unset,
        dbfqn: typing.Union[MetaOapg.properties.dbfqn, str, schemas.Unset] = schemas.unset,
        user: typing.Union[MetaOapg.properties.user, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Role':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            description=description,
            roleKey=roleKey,
            parent=parent,
            editPermissions=editPermissions,
            editUsers=editUsers,
            editLayouts=editLayouts,
            locked=locked,
            system=system,
            roleChildren=roleChildren,
            fqn=fqn,
            dbfqn=dbfqn,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )
