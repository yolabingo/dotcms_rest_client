# coding: utf-8

"""
    dotCMS REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dotcms_rest_client import schemas  # noqa: F401


class WorkflowActionForm(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "actionAssignable",
            "actionNextStep",
            "actionRoleHierarchyForAssign",
            "showOn",
            "schemeId",
            "requiresCheckout",
            "actionCommentable",
            "actionName",
        }
        
        class properties:
            schemeId = schemas.StrSchema
            actionName = schemas.StrSchema
            actionAssignable = schemas.BoolSchema
            actionCommentable = schemas.BoolSchema
            requiresCheckout = schemas.BoolSchema
            
            
            class showOn(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def NEW(cls):
                            return cls("NEW")
                        
                        @schemas.classproperty
                        def LOCKED(cls):
                            return cls("LOCKED")
                        
                        @schemas.classproperty
                        def UNLOCKED(cls):
                            return cls("UNLOCKED")
                        
                        @schemas.classproperty
                        def PUBLISHED(cls):
                            return cls("PUBLISHED")
                        
                        @schemas.classproperty
                        def UNPUBLISHED(cls):
                            return cls("UNPUBLISHED")
                        
                        @schemas.classproperty
                        def ARCHIVED(cls):
                            return cls("ARCHIVED")
                        
                        @schemas.classproperty
                        def LISTING(cls):
                            return cls("LISTING")
                        
                        @schemas.classproperty
                        def EDITING(cls):
                            return cls("EDITING")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'showOn':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            actionRoleHierarchyForAssign = schemas.BoolSchema
            actionNextStep = schemas.StrSchema
            actionId = schemas.StrSchema
            stepId = schemas.StrSchema
            
            
            class whoCanUse(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'whoCanUse':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            actionIcon = schemas.StrSchema
            roleHierarchyForAssign = schemas.BoolSchema
            actionNextAssign = schemas.StrSchema
            actionCondition = schemas.StrSchema
            __annotations__ = {
                "schemeId": schemeId,
                "actionName": actionName,
                "actionAssignable": actionAssignable,
                "actionCommentable": actionCommentable,
                "requiresCheckout": requiresCheckout,
                "showOn": showOn,
                "actionRoleHierarchyForAssign": actionRoleHierarchyForAssign,
                "actionNextStep": actionNextStep,
                "actionId": actionId,
                "stepId": stepId,
                "whoCanUse": whoCanUse,
                "actionIcon": actionIcon,
                "roleHierarchyForAssign": roleHierarchyForAssign,
                "actionNextAssign": actionNextAssign,
                "actionCondition": actionCondition,
            }
    
    actionAssignable: MetaOapg.properties.actionAssignable
    actionNextStep: MetaOapg.properties.actionNextStep
    actionRoleHierarchyForAssign: MetaOapg.properties.actionRoleHierarchyForAssign
    showOn: MetaOapg.properties.showOn
    schemeId: MetaOapg.properties.schemeId
    requiresCheckout: MetaOapg.properties.requiresCheckout
    actionCommentable: MetaOapg.properties.actionCommentable
    actionName: MetaOapg.properties.actionName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schemeId"]) -> MetaOapg.properties.schemeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionName"]) -> MetaOapg.properties.actionName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionAssignable"]) -> MetaOapg.properties.actionAssignable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionCommentable"]) -> MetaOapg.properties.actionCommentable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiresCheckout"]) -> MetaOapg.properties.requiresCheckout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showOn"]) -> MetaOapg.properties.showOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionRoleHierarchyForAssign"]) -> MetaOapg.properties.actionRoleHierarchyForAssign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionNextStep"]) -> MetaOapg.properties.actionNextStep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionId"]) -> MetaOapg.properties.actionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stepId"]) -> MetaOapg.properties.stepId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["whoCanUse"]) -> MetaOapg.properties.whoCanUse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionIcon"]) -> MetaOapg.properties.actionIcon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleHierarchyForAssign"]) -> MetaOapg.properties.roleHierarchyForAssign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionNextAssign"]) -> MetaOapg.properties.actionNextAssign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionCondition"]) -> MetaOapg.properties.actionCondition: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["schemeId", "actionName", "actionAssignable", "actionCommentable", "requiresCheckout", "showOn", "actionRoleHierarchyForAssign", "actionNextStep", "actionId", "stepId", "whoCanUse", "actionIcon", "roleHierarchyForAssign", "actionNextAssign", "actionCondition", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schemeId"]) -> MetaOapg.properties.schemeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionName"]) -> MetaOapg.properties.actionName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionAssignable"]) -> MetaOapg.properties.actionAssignable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionCommentable"]) -> MetaOapg.properties.actionCommentable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiresCheckout"]) -> MetaOapg.properties.requiresCheckout: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showOn"]) -> MetaOapg.properties.showOn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionRoleHierarchyForAssign"]) -> MetaOapg.properties.actionRoleHierarchyForAssign: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionNextStep"]) -> MetaOapg.properties.actionNextStep: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionId"]) -> typing.Union[MetaOapg.properties.actionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stepId"]) -> typing.Union[MetaOapg.properties.stepId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["whoCanUse"]) -> typing.Union[MetaOapg.properties.whoCanUse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionIcon"]) -> typing.Union[MetaOapg.properties.actionIcon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleHierarchyForAssign"]) -> typing.Union[MetaOapg.properties.roleHierarchyForAssign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionNextAssign"]) -> typing.Union[MetaOapg.properties.actionNextAssign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionCondition"]) -> typing.Union[MetaOapg.properties.actionCondition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["schemeId", "actionName", "actionAssignable", "actionCommentable", "requiresCheckout", "showOn", "actionRoleHierarchyForAssign", "actionNextStep", "actionId", "stepId", "whoCanUse", "actionIcon", "roleHierarchyForAssign", "actionNextAssign", "actionCondition", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        actionAssignable: typing.Union[MetaOapg.properties.actionAssignable, bool, ],
        actionNextStep: typing.Union[MetaOapg.properties.actionNextStep, str, ],
        actionRoleHierarchyForAssign: typing.Union[MetaOapg.properties.actionRoleHierarchyForAssign, bool, ],
        showOn: typing.Union[MetaOapg.properties.showOn, list, tuple, ],
        schemeId: typing.Union[MetaOapg.properties.schemeId, str, ],
        requiresCheckout: typing.Union[MetaOapg.properties.requiresCheckout, bool, ],
        actionCommentable: typing.Union[MetaOapg.properties.actionCommentable, bool, ],
        actionName: typing.Union[MetaOapg.properties.actionName, str, ],
        actionId: typing.Union[MetaOapg.properties.actionId, str, schemas.Unset] = schemas.unset,
        stepId: typing.Union[MetaOapg.properties.stepId, str, schemas.Unset] = schemas.unset,
        whoCanUse: typing.Union[MetaOapg.properties.whoCanUse, list, tuple, schemas.Unset] = schemas.unset,
        actionIcon: typing.Union[MetaOapg.properties.actionIcon, str, schemas.Unset] = schemas.unset,
        roleHierarchyForAssign: typing.Union[MetaOapg.properties.roleHierarchyForAssign, bool, schemas.Unset] = schemas.unset,
        actionNextAssign: typing.Union[MetaOapg.properties.actionNextAssign, str, schemas.Unset] = schemas.unset,
        actionCondition: typing.Union[MetaOapg.properties.actionCondition, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowActionForm':
        return super().__new__(
            cls,
            *_args,
            actionAssignable=actionAssignable,
            actionNextStep=actionNextStep,
            actionRoleHierarchyForAssign=actionRoleHierarchyForAssign,
            showOn=showOn,
            schemeId=schemeId,
            requiresCheckout=requiresCheckout,
            actionCommentable=actionCommentable,
            actionName=actionName,
            actionId=actionId,
            stepId=stepId,
            whoCanUse=whoCanUse,
            actionIcon=actionIcon,
            roleHierarchyForAssign=roleHierarchyForAssign,
            actionNextAssign=actionNextAssign,
            actionCondition=actionCondition,
            _configuration=_configuration,
            **kwargs,
        )
